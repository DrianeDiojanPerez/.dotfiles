return {
	"folke/flash.nvim",
	--config = function()
	--	-- require("flash").setup({
	--	--     label = {
	--	--         enabled = false,
	--	--     }
	--	-- })

	--	local flash = require("flash")
	--	flash.setup({
	--		-- labels = "abcdefghijklmnopqrstuvwxyz",
	--		labels = "asdfghjklqwertyuiopzxcvbnm",
	--		search = {
	--			-- search/jump in all windows
	--			multi_window = true,
	--			-- search direction
	--			forward = true,
	--			-- when `false`, find only matches in the given direction
	--			wrap = true,
	--			mode = "exact",
	--			-- behave like `incsearch`
	--			incremental = false,
	--			-- Excluded filetypes and custom window filters
	--			---@type (string|fun(win:window))[]
	--			exclude = {
	--				"notify",
	--				"cmp_menu",
	--				"noice",
	--				"flash_prompt",
	--				function(win)
	--					-- exclude non-focusable windows
	--					return not vim.api.nvim_win_get_config(win).focusable
	--				end,
	--				function(win)
	--					local win_type = vim.fn.getwininfo(vim.api.nvim_get_current_win())[1].quickfix
	--					return not win_type == 1
	--				end,
	--			},
	--			trigger = "",
	--			max_length = false, ---@type number|false
	--		},
	--		jump = {
	--			jumplist = true,
	--			pos = "start", ---@type "start" | "end" | "range"
	--			history = false,
	--			register = false,
	--			nohlsearch = false,
	--			autojump = false,
	--			inclusive = nil, ---@type boolean?
	--			offset = nil, ---@type number
	--		},
	--		label = {
	--			uppercase = true,
	--			exclude = "",
	--			current = true,
	--			after = true, ---@type boolean|number[]
	--			before = false, ---@type boolean|number[]
	--			style = "overlay", ---@type "eol" | "overlay" | "right_align" | "inline"
	--			reuse = "lowercase", ---@type "lowercase" | "all" | "none"
	--			distance = true,
	--			min_pattern_length = 0,
	--			rainbow = {
	--				enabled = false,
	--				shade = 5,
	--			},
	--			---@class Flash.Format
	--			---@field state Flash.State
	--			---@field match Flash.Match
	--			---@field hl_group string
	--			---@field after boolean
	--			---@type fun(opts:Flash.Format): string[][]
	--			format = function(opts)
	--				return { { opts.match.label, opts.hl_group } }
	--			end,
	--		},
	--		highlight = {
	--			backdrop = true,
	--			matches = true,
	--			priority = 5000,
	--			groups = {
	--				match = "FlashMatch",
	--				current = "FlashCurrent",
	--				backdrop = "FlashBackdrop",
	--				label = "FlashLabel",
	--			},
	--		},
	--		---@type fun(match:Flash.Match, state:Flash.State)|nil
	--		action = nil,
	--		pattern = "",
	--		continue = false,
	--		config = nil, ---@type fun(opts:Flash.Config)|nil
	--		modes = {
	--			search = {
	--				enabled = false,
	--				highlight = { backdrop = false },
	--				jump = { history = true, register = true, nohlsearch = true },
	--				search = {},
	--			},
	--			char = {
	--				enabled = true,
	--				config = function(opts)
	--					opts.autohide = opts.autohide or (vim.fn.mode(true):find("no") and vim.v.operator == "y")

	--					-- disable jump labels when not enabled, when using a count,
	--					-- or when recording/executing registers
	--					opts.jump_labels = opts.jump_labels
	--						and vim.v.count == 0
	--						and vim.fn.reg_executing() == ""
	--						and vim.fn.reg_recording() == ""

	--					-- Show jump labels only in operator-pending mode
	--					-- opts.jump_labels = vim.v.count == 0 and vim.fn.mode(true):find("o")
	--				end,
	--				-- hide after jump when not using jump labels
	--				autohide = false,
	--				-- show jump labels
	--				jump_labels = false,
	--				-- set to `false` to use the current line only
	--				multi_line = true,
	--				-- When using jump labels, don't use these keys
	--				-- This allows using those keys directly after the motion
	--				label = { exclude = "hjkliardc" },
	--				-- by default all keymaps are enabled, but you can disable some of them,
	--				-- by removing them from the list.
	--				-- If you rather use another key, you can map them
	--				-- to something else, e.g., { [";"] = "L", [","] = H }
	--				keys = { "f", "F", "t", "T", ";", "," },
	--				---@alias Flash.CharActions table<string, "next" | "prev" | "right" | "left">
	--				-- The direction for `prev` and `next` is determined by the motion.
	--				-- `left` and `right` are always left and right.
	--				char_actions = function(motion)
	--					return {
	--						[";"] = "next", -- set to `right` to always go right
	--						[","] = "prev", -- set to `left` to always go left
	--						-- clever-f style
	--						[motion:lower()] = "next",
	--						[motion:upper()] = "prev",
	--						-- jump2d style: same case goes next, opposite case goes prev
	--						-- [motion] = "next",
	--						-- [motion:match("%l") and motion:upper() or motion:lower()] = "prev",
	--					}
	--				end,
	--				search = { wrap = false },
	--				highlight = { backdrop = true },
	--				jump = {
	--					register = false,
	--					autojump = false,
	--				},
	--			},
	--			treesitter = {
	--				labels = "abcdefghijklmnopqrstuvwxyz",
	--				jump = { pos = "range", autojump = true },
	--				search = { incremental = false },
	--				label = { before = true, after = true, style = "inline" },
	--				highlight = {
	--					backdrop = false,
	--					matches = false,
	--				},
	--			},
	--			treesitter_search = {
	--				jump = { pos = "range" },
	--				search = { multi_window = true, wrap = true, incremental = false },
	--				remote_op = { restore = true },
	--				label = { before = true, after = true, style = "inline" },
	--			},
	--			remote = {
	--				remote_op = { restore = true, motion = true },
	--			},
	--		},
	--		prompt = {
	--			enabled = true,
	--			prefix = { { "âš¡", "FlashPromptIcon" } },
	--			win_config = {
	--				relative = "editor",
	--				width = 1, -- when <=1 it's a percentage of the editor width
	--				height = 1,
	--				row = -1, -- when negative it's an offset from the bottom
	--				col = 0, -- when negative it's an offset from the right
	--				zindex = 1000,
	--			},
	--		},
	--		remote_op = {
	--			restore = false,
	--			motion = false,
	--		},
	--	})

	--	-- flash.toggle(true)
	--	--
	--	vim.keymap.set("n", "<C-m>", function()
	--		flash.jump({})
	--	end)
	--	-- vim.api.nvim_set_keymap('n', '<Enter>', '', { noremap = true, silent = true })
	--end,
	-- event = "VeryLazy",
	-- opts = {},
	-- keys = {
	--     { "<C-m>", mode = { "n", "x" }, function() require("flash").jump({}) end, desc = "Flash" },
	--     -- { "S", mode = { "n", "x", "o" }, function() require("flash").treesitter() end, desc = "Flash Treesitter" },
	--     -- { "r", mode = "o", function() require("flash").remote() end, desc = "Remote Flash" },
	--     -- { "R", mode = { "o", "x" }, function() require("flash").treesitter_search() end, desc = "Treesitter Search" },
	--     -- { "<C-m>", mode = { "n" }, function() require("flash").toggle(true) end, desc = "Toggle Flash Search" },
	-- },
	-- config = function()
	--     require("flash").setup({
	--         label = {
	--             enabled = false,
	--         }
	--     })
	-- end
}
