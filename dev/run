#!/bin/bash

# Auto-detect script directory
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Color definitions (add these if not already defined)
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly CYAN='\033[0;36m'
readonly BLUE='\033[0;34m'
readonly WHITE='\033[1;37m'
readonly BOLD='\033[1m'
readonly GRAY='\033[0;90m'
readonly RESET='\033[0m'

# Enhanced logging function with timestamps and levels
log() {
    local level="${2:-INFO}"
    local timestamp
    timestamp=$(date '+%B %d, %Y %I:%M %p')

    if [[ "${dry_run:-0}" == "1" ]]; then
        echo -e "${YELLOW}[${timestamp}][DRY_RUN][${level}]${RESET}: $1"
    else
        echo -e "${CYAN}[${timestamp}][${level}]${RESET}: $1"
    fi
}

# Enhanced newline function
newLine() {
    echo
}

# Show usage information
show_usage() {
    echo -e "
${BOLD}${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${RESET}
${BOLD}${WHITE}                           🚀 SCRIPT RUNNER                              ${RESET}
${BOLD}${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${RESET}

${BOLD}${YELLOW}USAGE:${RESET}
  ${BOLD}$0${RESET} ${GREEN}[OPTIONS]${RESET} ${CYAN}<SEARCH_PATTERN>${RESET}
  ${BOLD}$0${RESET} ${GREEN}[OPTIONS]${RESET} ${GREEN}--all${RESET}

${BOLD}${YELLOW}ARGUMENTS:${RESET}
  ${CYAN}SEARCH_PATTERN${RESET}      Run scripts matching this pattern ${GRAY}(required unless --all is used)${RESET}

${BOLD}${YELLOW}OPTIONS:${RESET}
  ${GREEN}--all${RESET}              Run all scripts in the runs directory
  ${GREEN}--dry${RESET}              Show what would be executed without running scripts
  ${GREEN}-e, --env${RESET} ${CYAN}ENV${RESET}      Set DEV_ENV variable
  ${GREEN}-h, --help${RESET}         Show this help message

${BOLD}${YELLOW}EXAMPLES:${RESET}
  ${WHITE}$0${RESET} ${GREEN}--all${RESET}              ${GRAY}# Run all scripts in ./runs${RESET}
  ${WHITE}$0${RESET} ${CYAN}test${RESET}               ${GRAY}# Run only scripts matching \"test\"${RESET}
  ${WHITE}$0${RESET} ${GREEN}--dry${RESET} ${CYAN}deploy${RESET}       ${GRAY}# Dry run scripts matching \"deploy\"${RESET}
  ${WHITE}$0${RESET} ${GREEN}--dry${RESET} ${GREEN}--all${RESET}        ${GRAY}# Dry run all scripts${RESET}

${BOLD}${YELLOW}INFO:${RESET}
  ${WHITE}📁 Script directory:${RESET} ${CYAN}${script_dir}${RESET}

${BOLD}${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${RESET}
"
}

# Parse command line arguments
parse_arguments() {
    local run_all=0
    local has_search_pattern=0

    while [[ $# -gt 0 ]]; do
        case $1 in
            --all)
                run_all=1
                shift
                ;;
            --dry)
                dry_run="1"
                shift
                ;;
            -e|--env)
                if [[ -z "$2" ]]; then
                    log "ERROR: --env requires a value" "ERROR"
                    exit 1
                fi
                DEV_ENV="$2"
                shift 2
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            -*)
                log "ERROR: Unknown option $1" "ERROR"
                show_usage
                exit 1
                ;;
            *)
                if [[ -z "${grep:-}" ]]; then
                    grep="$1"
                    has_search_pattern=1
                else
                    log "ERROR: Too many arguments" "ERROR"
                    show_usage
                    exit 1
                fi
                shift
                ;;
        esac
    done

    # Validate argument combinations
    if [[ $run_all -eq 1 && $has_search_pattern -eq 1 ]]; then
        log "ERROR: Cannot use both --all and search pattern" "ERROR"
        show_usage
        exit 1
    fi

    if [[ $run_all -eq 0 && $has_search_pattern -eq 0 ]]; then
        log "ERROR: Must specify either --all or provide a search pattern" "ERROR"
        show_usage
        exit 1
    fi

    # Set grep pattern for --all
    if [[ $run_all -eq 1 ]]; then
        grep=".*"  # Match all scripts
    fi
}

# Input validation
validate_inputs() {
    if [[ ! -d "${script_dir}" ]]; then
        log "ERROR: script_dir '${script_dir}' does not exist" "ERROR"
        exit 1
    fi

    if [[ ! -d "${script_dir}/runs" ]]; then
        log "ERROR: runs directory '${script_dir}/runs' does not exist" "ERROR"
        log "Please create the runs directory and place your executable scripts there" "INFO"
        exit 1
    fi
}

# Main execution function
run_scripts() {
    local runs_dir="${script_dir}/runs"
    local grep_pattern="${grep}"
    local executed_count=0
    local skipped_count=0

    log "Starting script execution"
    log "Environment: ${DEV_ENV:-not_set}"
    if [[ "$grep_pattern" == ".*" ]]; then
        log "Mode: Running ALL scripts"
    else
        log "Filter pattern: '${grep_pattern}'"
    fi
    log "Dry run mode: ${dry_run:-0}"
    newLine

    # Use array to properly handle filenames with spaces
    local scripts=()
    while IFS= read -r -d '' script; do
        scripts+=("$script")
    done < <(find "${runs_dir}" -mindepth 1 -maxdepth 1 -type f -executable -print0 2>/dev/null)

    if [[ ${#scripts[@]} -eq 0 ]]; then
        log "No executable scripts found in ${runs_dir}" "WARN"
        return 0
    fi

    log "Found ${#scripts[@]} executable script(s)"
    newLine

    # Process each script
    for script in "${scripts[@]}"; do
        local script_name
        script_name=$(basename "$script")

        # Check if script matches the filter pattern
        if [[ "$script_name" =~ $grep_pattern ]]; then
            log "${GREEN}✓ Executing${RESET}: ${CYAN}${script}${RESET}"

            if [[ "${dry_run:-0}" == "0" ]]; then
                if ! "$script"; then
                    log "ERROR: Script '${script}' failed with exit code $?" "ERROR"
                    # Continue with other scripts rather than exiting
                fi
            fi

            ((executed_count++))
            newLine
        else
            log "${YELLOW}⊘ Skipping${RESET}: ${script_name} (doesn't match pattern '${grep_pattern}')"
            ((skipped_count++))
        fi
    done

    # Summary
    newLine
    log "Execution complete: ${executed_count} executed, ${skipped_count} skipped"

    if [[ "${dry_run:-0}" == "1" ]]; then
        log "This was a dry run - no scripts were actually executed" "INFO"
    fi
}

# Main execution
main() {
    # If no arguments provided, show usage
    if [[ $# -eq 0 ]]; then
        show_usage
        exit 0
    fi

    parse_arguments "$@"
    validate_inputs
    run_scripts
}

# Only run main if script is executed directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
